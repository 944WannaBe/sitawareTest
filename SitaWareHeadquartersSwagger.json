{
	"swagger": "2.0",
	"info": {
		"description": "This is the documentation of the SitaWare Headquarters REST API.\r\n\r\n**Authentication and Authorization**\r\n\r\nService methods may require authentication and authorization of the calling user.\r\nThe requirements are described in the description of each service method.\r\n\r\nThe authentication method that should be used is determined by the security option chosen at installation time.\r\nE.g. if SitaWare Headquarters is installed with the file based security option then BASIC authentication is used.\r\nThis means the HTTP header \"Authorization\" should be set with a proper base64 encoded user name and password as\r\ndefined in the HTTP specification.\r\nOther authentication methods have different requirements.\r\n\r\nAuthorization to call a service method is handled through privileges that are mapped to user roles through the PermissionNameMapping.xml file.\r\nThe mentioned privileges are the minimum privileges a caller need to have in order to be authorized to call the method.\r\nDepending on the current state of the data, additional privileges may be required. E.g. the privileges needed to change the plan state\r\nis dependant on the current state of the plan.\r\n\r\nNote, that objects that supports Access Control Lists (ACL) may impose additional restrictions to the operations that can\r\nperformed.\r\n\r\n**Status Codes**\r\n\r\nThe documentation sections of the various service operations do not contain individual information on possible status codes.\r\nInstead the general rule is that a successful invocation returns a status code in the 200 series, whereas an unsuccessful\r\ninvocation returns either a status code in the 400 series or status code 500.\r\n\r\n**Symbol Service**\r\n\r\nThe symbol data type represents a symbol. All types of symbols are represented by this type. It has a number of common\r\n  properties shared by all symbol types, and an associated object that holds the specific properties for a particular symbol type.\r\nThe type of the associated object is determined by the type property. The associated object in turn has a common set of properties\r\nin addition to the specific properties for the type. The figure below shows the relation.\r\n\r\n![alt text](./images/symbolservice.jpg \"LayerCatalogue service data types\")\r\n\r\n**Unit Service**\r\n\r\nThe Unit Service supports operations on units in the organisation structure. It is possible to set own unit\r\nand modify units in the organisation structure as well as querying information about units and their subordinates.\r\n\r\nAn unit is identified uniquely by the Fully Qualified Name (FQN) and is based on the path the\r\nunit has in the associated ORBAT.\r\n\r\n**Holding Service**\r\n\r\nThe holdings service allows users to configure and distribute Holdings types and templates for keeping track\r\non inventory for an organisation. Holdings are based on a concept of distributing templates to subordinates who\r\nthen reports on the requested types. This relation of superior â€“ subordinate is recurring whenever a template is\r\ndistributed to the next link -in the chain of command.\r\n\r\nThe endpoint names are split up in three categories: types, shared and local.\r\n* 'types' endpoints support operations on holding types: create, delete, import, export and retrieving holding type information.\r\n* 'shared' endpoints deal with operations for sharing holding reports holding types used in the template\r\n* 'local' endpoints support operations regarding retrieving and editing holdings for local use and not sharing new information.\r\n",
		"version": "1.0.0"
	},
	"basePath": "/sw/rest",
	"tags": [{
			"name": "Orbat"
		}, {
			"name": "Picture"
		}, {
			"name": "TaskOrg"
		}, {
			"name": "Holding"
		}, {
			"name": "Unit"
		}, {
			"name": "Mapping"
		}, {
			"name": "Plan Element"
		}, {
			"name": "Plan Import Export"
		}, {
			"name": "Plan"
		}, {
			"name": "Task"
		}, {
			"name": "Plan Text Document"
		}, {
			"name": "Layer Catalogue"
		}, {
			"name": "Symbol"
		}
	],
	"paths": {
		"/v1/orbat/orbats/{orbatId}/organisation/{organisationId}/addRemoveHoldingTypes": {
			"put": {
				"tags": ["Orbat"],
				"summary": "Adds or removes nominal holding types for organisation in specified ORBAT.",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "addRemoveNominalHoldingTypes",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AddRemoveNominalHoldingTypesForOrbatDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/organisations/{organisationId}/makeRoot": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Makes organisation in an ORBAT the root of that ORBAT",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "makeOrbatElementRoot",
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/organisations/{organisationId}": {
			"put": {
				"tags": ["Orbat"],
				"summary": "Updates an organisation",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "updateOrbatElement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/OrbatElementDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Orbat"],
				"summary": "Removes an organisation and its subordinates from their ORBAT",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "removeOrbatElement",
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/organisations/{sourceId}/move": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Moves ORBAT elements",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "moveOrbatElements",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "sourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/MoveOrbatElementDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/organisations/{organisationId}/pasteAsChild": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Pastes ORBAT elements as children",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "pasteOrbatElementsAsChildren",
				"produces": ["application/json"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PasteOrbatDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/ArrayOfKeyDTO"
						}
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/root": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Creates root organisation for an ORBAT",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "createRootElementForOrbat",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/OrbatElementDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/orbat/organisations/{organisationId}/isLinkedToMap": {
			"get": {
				"tags": ["Orbat"],
				"summary": "Indicates whether an organisation is used as a symbol on the map",
				"description": "Requires authentication.",
				"operationId": "isOrganisationLinkedToMap",
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/pasteAsRoot": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Pastes an ORBAT element as root",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "pasteOrbatElementAsRoot",
				"produces": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PasteOrbatDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/ArrayOfKeyDTO"
						}
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/organisation/{fqn}/nominalHoldingsByFQN": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Set the quantity for nominal holdings for unit by FQN in specified ORBAT",
				"description": "Requires authentication.",
				"operationId": "updateNominalHoldingByFQN",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/HoldingTypeWithQuantityDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/organisation/{organisationId}/nominalHoldings": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Set the quantity for nominal holdings for unit in specified ORBAT",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "updateNominalHolding",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdateNominalHoldingDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/organisation/{organisationId}/nominalHoldings/delete": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Deletes the nominal holdings for an ORBAT",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "deleteNominalHolding",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeleteNominalHoldingDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats": {
			"get": {
				"tags": ["Orbat"],
				"summary": "Gets a listing of all ORBATs",
				"description": "Requires authentication.",
				"operationId": "getOrbatListing",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/OrbatListingDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Orbat"],
				"summary": "Creates an ORBAT",
				"description": "Requires authentication and the privilege 'CreateOrbat'.",
				"operationId": "createOrbat",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/OrbatDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/orbat/organisations/{organisationId}/subordinates": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Creates subordinate for organisation",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "createSubordinateElementForOrganisation",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/OrbatElementDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/orbat/orbats/import": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Imports an ORBAT",
				"description": "Requires authentication and the privilege 'CreateOrbat'.",
				"operationId": "importOrbat",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/activeOrbats": {
			"put": {
				"tags": ["Orbat"],
				"summary": "Set a list of ORBATs as active",
				"description": "Requires authentication and the privilege 'ChangeOrbatActivity'.",
				"operationId": "setActiveOrbats",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}": {
			"put": {
				"tags": ["Orbat"],
				"summary": "Updates an ORBAT",
				"description": "Requires authentication and the privilege 'EditOrbat'.",
				"operationId": "updateOrbat",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/OrbatDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Orbat"],
				"summary": "Deletes an ORBAT",
				"description": "Requires authentication and all of the following privileges: 'EditOrbat', 'DeleteOrbat'.",
				"operationId": "deleteOrbat",
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/export": {
			"get": {
				"tags": ["Orbat"],
				"summary": "Exports an ORBAT",
				"description": "Requires authentication.",
				"operationId": "exportOrbat",
				"produces": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/organisation/{fqn}/addRemoveHoldingTypesByFQN": {
			"put": {
				"tags": ["Orbat"],
				"summary": "Adds or removes nominal holding types for organisation (by FQN) in specified ORBAT.",
				"description": "Requires authentication.",
				"operationId": "addRemoveNominalHoldingTypesByFQN",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AddRemoveNominalHoldingTypesForOrbatDTOByFQN"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/orbat/orbats/{orbatId}/setAsActive": {
			"post": {
				"tags": ["Orbat"],
				"summary": "Set an ORBAT as the active one",
				"description": "Requires authentication and the privilege 'ChangeOrbatActivity'.",
				"operationId": "setActiveOrbat",
				"parameters": [{
						"name": "orbatId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/picture/pictures/{pictureId}": {
			"get": {
				"tags": ["Picture"],
				"summary": "Gets a picture",
				"description": "Requires authentication.",
				"operationId": "getPicture",
				"produces": ["application/json"],
				"parameters": [{
						"name": "pictureId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/PictureDTO"
						}
					}
				}
			},
			"put": {
				"tags": ["Picture"],
				"summary": "Updates a picture",
				"description": "Requires authentication.",
				"operationId": "updatePicture",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
						"name": "pictureId",
						"in": "path",
						"description": "ID of the picture to update (not currently used)",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Picture to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PictureDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/PictureDTO"
						}
					}
				}
			},
			"delete": {
				"tags": ["Picture"],
				"summary": "Deletes a picture",
				"description": "Requires authentication.",
				"operationId": "deletePicture",
				"parameters": [{
						"name": "pictureId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/picture/pictures": {
			"get": {
				"tags": ["Picture"],
				"summary": "Gets all pictures",
				"description": "Requires authentication.",
				"operationId": "getPictures",
				"produces": ["application/json"],
				"parameters": [{
						"name": "includeReadOnly",
						"in": "query",
						"description": "Indicates whether read-only pictures should be included. By delfault they will be included.",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PictureDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Picture"],
				"summary": "Creates a picture",
				"description": "Requires authentication and the privilege 'CreatePicture'.",
				"operationId": "createPicture",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "Picture to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PictureDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/PictureDTO"
						}
					}
				}
			}
		},
		"/v1/taskorg/taskorgs/{taskOrgId}/root": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Creates root task organisation element for the specified task organisation",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createRootElementForTaskOrganisation",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "taskOrgId",
						"in": "path",
						"description": "Parent task organisation ID",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Task organisation element to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/TaskOrganisationElementDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/taskorg/organisations/{organisationId}/subordinates": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Creates a subordinate organisation for the specified task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createSubordinateOrganisationForTaskOrganisationElement",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"description": "Parent task organisation element ID",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Task organisation element to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/TaskOrganisationElementDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/taskorg/relationships/reductions/{taskOrgElementId}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Plans an asymmetric reduction relationship for the specified task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "planAsymmetricReduction",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "taskOrgElementId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Planned relationship",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlannedRelationshipDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/organisations/{organisationId}": {
			"put": {
				"tags": ["TaskOrg"],
				"summary": "Updates a task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "modifyTaskOrganisationElement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"description": "Task organisation element ID",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Task organisation element to modify",
						"required": false,
						"schema": {
							"$ref": "#/definitions/TaskOrganisationElementDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["TaskOrg"],
				"summary": "Removes a task organisation element and all its subjacent elements",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "removeTaskOrganisationElement",
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"description": "Task organisation element ID",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "deleteAssociatedSymbols",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/relationships/reinforcements/{relationId}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Plans an asymmetric reinforcement relationship for a task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "planAsymmetricReinforcement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "relationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Planned relationship",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlannedRelationshipDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"put": {
				"tags": ["TaskOrg"],
				"summary": "Assigns a planned reinforcement with the specified assigned task organisation element (only asymmetric reinforcement)",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "assignPlannedReinforcement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "relationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Task organisation element",
						"required": false,
						"schema": {
							"$ref": "#/definitions/TaskOrganisationElementDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/relationships/reductions/{relationId}/{taskOrgElementId}": {
			"put": {
				"tags": ["TaskOrg"],
				"summary": "Assigns a planned reduction with a specific assigned task organisation element (both symmetric and asymmetric reductions)",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "assignPlannedReduction",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "relationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "taskOrgElementId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/taskorgs/{taskOrgId}/root/addTaskOrgStructureAsRootNode/{taskOrgNodeID}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Replaces the existing root task organisation element with the specified task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "addTaskOrgStructureAsRootNode",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "taskOrgId",
						"in": "path",
						"description": "ID of task organisation to replace root in",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "taskOrgNodeID",
						"in": "path",
						"description": "ID of task organisation element to replace root with",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/taskorgs/{taskOrgId}/root/addOrbatStructureAsRootNode/{orbatNodeId}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Replaces the existing root task organisation element with the specified ORBAT element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "addOrbatStructureAsRootNode",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "taskOrgId",
						"in": "path",
						"description": "ID of task organisation to replace root in",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "orbatNodeId",
						"in": "path",
						"description": "ID of ORBAT element to replace root with",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/relationships/{relationId}": {
			"put": {
				"tags": ["TaskOrg"],
				"summary": "Modifies a planned or assigned task organisation element relationship",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "modifyPlannedRelationship",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "relationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Planned relationship to modify",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlannedRelationshipDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["TaskOrg"],
				"summary": "Cancels and removes a planned or assigned task organisation element relationship",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "cancelRelationship",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "relationId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/organisations/{organisationId}/index/{position}": {
			"put": {
				"tags": ["TaskOrg"],
				"summary": "Moves a task organisation element by specifying a position among its siblings",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "moveTaskOrganisationElement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"description": "Task organisation element ID",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "position",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/organisations/plan/relationship/{reducedElementId}/{reinforcedElementId}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Creates a detachment/attachment relationship between two task organisation elements",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "planRelationship",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "reducedElementId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "reinforcedElementId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"in": "body",
						"name": "body",
						"description": "Planned relationship to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlannedRelationshipDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/taskorgs/{taskOrgId}": {
			"get": {
				"tags": ["TaskOrg"],
				"summary": "Gets a task organisation",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "getSingleTaskOrganisation",
				"produces": ["application/json"],
				"parameters": [{
						"name": "taskOrgId",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "depthLevel",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 1,
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TaskOrgDTO"
						}
					}
				}
			}
		},
		"/v1/taskorg/organisations/{organisationId}/appendOrbatElement/{sourceOrganisationId}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Adds a deep copy of an ORBAT element to a task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "appendOrbatElement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"description": "ID of task organisation element to add to",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "sourceOrganisationId",
						"in": "path",
						"description": "ID of ORBAT element element to add",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/taskorg/organisations/{organisationId}/appendTaskOrgElement/{sourceOrganisationId}": {
			"post": {
				"tags": ["TaskOrg"],
				"summary": "Adds a deep copy of a task organisation element to another task organisation element",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "appendTaskOrgElement",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "organisationId",
						"in": "path",
						"description": "ID of task organisation element to add to",
						"required": true,
						"type": "string",
						"format": "uuid"
					}, {
						"name": "sourceOrganisationId",
						"in": "path",
						"description": "ID of task organisation element to add",
						"required": true,
						"type": "string",
						"format": "uuid"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/local/sendReport": {
			"post": {
				"tags": ["Holding"],
				"summary": "Sends holding report to superior unit.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "sendHoldingReportToSuperior",
				"parameters": [],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/shared/report": {
			"post": {
				"tags": ["Holding"],
				"summary": "Sets the aggregated actual holdings for the given units.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "setAggregatedActualHoldings",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "Unit holding reports",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UnitHoldingReportsDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/types/{holdingTypeId}": {
			"delete": {
				"tags": ["Holding"],
				"summary": "Deletes specified holding type. If holding type in use, then exception HoldingTypeInUseException will be thrown.",
				"description": "Requires authentication and the privilege 'EditHoldingTypes'.",
				"operationId": "deleteHoldingType",
				"parameters": [{
						"name": "holdingTypeId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/shared/{fqn}/report": {
			"get": {
				"tags": ["Holding"],
				"summary": "Gets holding report for given unit.",
				"description": "Requires authentication.",
				"operationId": "getHoldingReportForUnit",
				"produces": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/LastHoldingReportDTO"
						}
					}
				}
			}
		},
		"/v1/holding/types": {
			"get": {
				"tags": ["Holding"],
				"summary": "Gets all holding types",
				"description": "Requires authentication.",
				"operationId": "getHoldingTypes",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"uniqueItems": true,
							"items": {
								"$ref": "#/definitions/HoldingTypeDTO"
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Holding"],
				"summary": "Creates a new holding type. The specified category, holdingClass, holdingSubClass, holdingSubSubClass and unitOfMeasure have validation rules.\r\n                          The rules can be retrieved by calling \"/rest/v1/holding/types/legalValues\" endpoint.\r\n                          In addition, holding types are unique on the combination of\r\n                          name, category, holdingClass, holdingSubClass, holdingSubSubClass and unitOfMeasure.",
				"description": "Requires authentication and the privilege 'EditHoldingTypes'.",
				"operationId": "createHoldingType",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The holding type to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/CreateHoldingTypeDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/types/import": {
			"post": {
				"tags": ["Holding"],
				"summary": "Imports holdings types in the SHF XML format.",
				"description": "Requires authentication.",
				"operationId": "importHoldingTypes",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/types/export": {
			"get": {
				"tags": ["Holding"],
				"summary": "Exports holdings types in the SHF XML format.",
				"description": "Requires authentication.",
				"operationId": "exportHoldingTypes",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/local/{fqn}/activeTypes": {
			"put": {
				"tags": ["Holding"],
				"summary": "List of holding type ids specifying the types that are shown in the holding overview.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "updateActiveHoldingTypes",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "List of holding types that included into template",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/local/{fqn}/items": {
			"post": {
				"tags": ["Holding"],
				"summary": "Sets the actual holdings for a unit specified by Fully Qualified Name. If the holding types are marked as â€˜in templateâ€™ the quantity will be included when sending the holding report if the FQN specified â€˜own unitâ€™, otherwise the holding types will be part of the template sent to the subordinate specified by the FQN.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "setActualHoldingItems",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ActualHoldingTypeWithContentDTO"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/local/{fqn}/items/{holdingTypeId}": {
			"post": {
				"tags": ["Holding"],
				"summary": "Creates an actual holding item if it does not exist, otherwise update. If marked as â€˜in templateâ€™ the quantity will be included when sending the holding report if the FQN specified â€˜own unitâ€™, otherwise the holding type will be part of the template sent to the subordinate specified by FQN.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "createOrUpdateActualHoldingItem",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "holdingTypeId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActualHoldingItemContentDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/shared/sendAllTemplates": {
			"post": {
				"tags": ["Holding"],
				"summary": "Sends all templates to subordinate units.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "distributeAllHoldingTemplates",
				"parameters": [],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/types/legalValues": {
			"get": {
				"tags": ["Holding"],
				"summary": "Gets the legal units of measure and a tree of valid combinations of holdings type categories, classes, subsclasses and subsubclasses.",
				"description": "Requires authentication.",
				"operationId": "getHoldingTypesInfo",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Contains legal units of measure and a tree of valid combinations of holdings type categories, classes, subsclasses and subsubclasses"
						}
					}
				}
			}
		},
		"/v1/holding/local/exportReport": {
			"get": {
				"tags": ["Holding"],
				"summary": "Exports nominal and actual holdings for own unit and all subordinate units to excel file.",
				"description": "Requires authentication.",
				"operationId": "getExportHoldingReport",
				"produces": ["text/plain"],
				"parameters": [],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/holding/shared/{fqn}/sendTemplate": {
			"post": {
				"tags": ["Holding"],
				"summary": "Sends template to subordinate unit specified by FQN.",
				"description": "Requires authentication and the privilege 'EditHoldingReport'.",
				"operationId": "sendHoldingTemplateForUnit",
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/unit/self": {
			"get": {
				"tags": ["Unit"],
				"summary": "Gets own unit.",
				"description": "Requires authentication.",
				"operationId": "getOwnUnit",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/UnitDTO"
						}
					}
				}
			},
			"post": {
				"tags": ["Unit"],
				"summary": "Sets own unit",
				"description": "Requires authentication.",
				"operationId": "setOwnUnit",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/OwnUnitDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/unit/units/{fqn}/subordinates": {
			"get": {
				"tags": ["Unit"],
				"summary": "Gets the subordinate units of given unit.",
				"description": "Requires authentication.",
				"operationId": "getSubordinates",
				"produces": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/UnitDTO"
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Unit"],
				"summary": "Updates a given unit with given subordinate units.",
				"description": "Requires authentication.",
				"operationId": "updateUnitSubordinates",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SubordinateUnitDTO"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/unit/units/{fqn}/superiors": {
			"get": {
				"tags": ["Unit"],
				"summary": "Gets the superior units of given unit. A unit will have multiple superiors if more units have assigned it as their subordinate.",
				"description": "Requires authentication.",
				"operationId": "getSuperior",
				"produces": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/UnitDTO"
							}
						}
					}
				}
			}
		},
		"/v1/unit/units/{fqn}/callsigns": {
			"get": {
				"tags": ["Unit"],
				"summary": "Gets the subordinate call signs of a given unit.",
				"description": "Requires authentication.",
				"operationId": "getCallsigns",
				"produces": ["application/json"],
				"parameters": [{
						"name": "fqn",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"/v1/mapping/mappings/{mappingId}/execute": {
			"post": {
				"tags": ["Mapping"],
				"summary": "Executes a specified mapping.",
				"description": "Requires authentication.",
				"operationId": "executeMapping",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
						"name": "mappingId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/MappingInputDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/MappingOutputDto"
						}
					}
				}
			}
		},
		"/v1/mapping/mappings": {
			"get": {
				"tags": ["Mapping"],
				"summary": "Gets the definitions of the available mappings.",
				"description": "Requires authentication.",
				"operationId": "getMappings",
				"produces": ["application/json"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/MappingListDto"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/{elementId}/{destinationId}": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Copies the plan element having the supplied id to another folder within the plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "copy",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"put": {
				"tags": ["Plan Element"],
				"summary": "Moves the plan element having the supplied id to another folder within the plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "move",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/layers": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Creates a plan element layer",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createPlanLayer",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The layer to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementLayerPropertiesDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/taskorgs": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Creates a plan element task org",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createTaskOrg",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The task org to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementTaskOrgPropertiesDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/files/{elementId}": {
			"get": {
				"tags": ["Plan Element"],
				"summary": "Gets the contents of the plan element file having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "downloadFile",
				"produces": ["application/octet-stream"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the plan element file having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateFile",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": " The file to upload",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementFileDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan Element"],
				"summary": "Deletes the plan element file having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deleteFile",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/files/exists": {
			"get": {
				"tags": ["Plan Element"],
				"summary": "Returns a boolean indicating whether the plan element file with the specified name exists in the specified folder",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "fileExists",
				"produces": ["text/plain"],
				"parameters": [{
						"name": "parentId",
						"in": "query",
						"required": false,
						"type": "string"
					}, {
						"name": "name",
						"in": "query",
						"description": "The name to search for",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/{elementId}/state": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Changes the state of the plan element having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ChangePlanAuthorisationState', 'ViewPlanOrder'.",
				"operationId": "setPlanElementState",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The new plan element state",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementStateDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/textdocuments": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Creates a plan element text document",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createTextDocument",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": " The text document to create ",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementTextDocumentDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/textdocuments/{elementId}": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the plan element text document having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateTextDocument",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": " The text document to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementTextDocumentDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan Element"],
				"summary": "Deletes the plan element text document having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deleteTextDocument",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/layers/{elementId}": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the plan element layer having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updatePlanLayer",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The layer to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementLayerPropertiesDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan Element"],
				"summary": "Deletes the plan element layer having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deletePlanLayer",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/files": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Uploads a plan element file",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "uploadFile",
				"consumes": ["multipart/form-data"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "file",
						"in": "formData",
						"description": "The file to upload",
						"required": true,
						"type": "file"
					}, {
						"name": "fileName",
						"in": "formData",
						"required": true,
						"type": "string"
					}, {
						"name": "parentId",
						"in": "formData",
						"description": "The plan folder id",
						"required": true,
						"type": "string"
					}, {
						"name": "include",
						"in": "formData",
						"description": "Mark for inclusion during export",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/synchronizationmatrix/{elementId}": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the Synchronization Matrix plan element having the id supplied",
				"description": "Requires authentication.",
				"operationId": "updateSynchronizationMatrix",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": " The syncronization matrix to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementSynchronizationMatrixDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/c2planlayers/export/{layerC2Id}": {
			"get": {
				"tags": ["Plan Element"],
				"summary": "Exports the plan having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "exportC2PlanLayer",
				"produces": ["application/octet-stream"],
				"parameters": [{
						"name": "layerC2Id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/import/{elementId}/{destinationId}": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Copies the plan element having the supplied id to a folder within another (or current) plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "importPlanElements",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/planlayers/import": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Imports a plan",
				"description": "Imports plan layers in SPL format into the specified plan folder. Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "importPlanLayer",
				"consumes": ["multipart/form-data"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "file",
						"in": "formData",
						"description": "The plan layer to import",
						"required": true,
						"type": "file"
					}, {
						"name": "fileName",
						"in": "formData",
						"required": true,
						"type": "string"
					}, {
						"name": "parentId",
						"in": "formData",
						"description": "The plan folder id",
						"required": true,
						"type": "string"
					}, {
						"name": "include",
						"in": "formData",
						"description": "Mark for inclusion during export",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/planlayers/export/{layerId}": {
			"get": {
				"tags": ["Plan Element"],
				"summary": "Exports the plan having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "exportPlanLayer",
				"produces": ["application/octet-stream"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/taskorgs/{elementId}": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the plan element task org having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateTaskOrg",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The task org to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementTaskOrgPropertiesDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan Element"],
				"summary": "Deletes the plan element task org having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deleteTaskOrg",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/folders": {
			"post": {
				"tags": ["Plan Element"],
				"summary": "Creates a plan element folder",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createElementFolder",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The folder to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementFolderPropertiesDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/folders/{elementId}": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the plan element folder having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateElementFolder",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The folder to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanElementFolderPropertiesDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan Element"],
				"summary": "Deletes the plan element folder having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deleteElementFolder",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/order/{elementId}": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Changes the order of the plan elements",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "changePlanElementOrder",
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "A list with the order of the elements",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ListPlanElementIndexPropertyDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/include": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Updates the \"include in export\" status of the supplied list of plan elements",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "setIncludeProperty",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The plan elements to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ListPlanElementIncludePropertyDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/planElements/{elementId}/locked": {
			"put": {
				"tags": ["Plan Element"],
				"summary": "Changes the locked state of the plan element having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "setPlanElementLocked",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "elementId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The new plan element locked state",
						"required": false,
						"schema": {
							"$ref": "#/definitions/LockedDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/importExport/{planId}": {
			"get": {
				"tags": ["Plan Import Export"],
				"summary": "Exports the plan having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "exportPlan",
				"produces": ["application/octet-stream"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/importExport": {
			"post": {
				"tags": ["Plan Import Export"],
				"summary": "Imports a plan",
				"description": "SPF plans will be imported into the EXTERNAL folder while ZIP plans will be imported into the specified destination folder. Requires authentication and all of the following privileges: 'CreatePlan', 'ViewPlanOrder'.",
				"operationId": "importPlan",
				"consumes": ["multipart/form-data"],
				"parameters": [{
						"name": "file",
						"in": "formData",
						"description": "The plan to import in ZIP or SPF format",
						"required": true,
						"type": "file"
					}, {
						"name": "fileName",
						"in": "formData",
						"required": true,
						"type": "string"
					}, {
						"name": "parentId",
						"in": "formData",
						"description": "The plan folder id",
						"required": true,
						"type": "string"
					}, {
						"name": "isReadOnly",
						"in": "formData",
						"description": "Import as readonly",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/folders/{folderId}": {
			"put": {
				"tags": ["Plan"],
				"summary": "Updates the folder having the supplied Id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateFolder",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "folderId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The folder to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FolderPropertiesDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan"],
				"summary": "Deletes the folder having the supplied Id",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'DeletePlanOrder', 'ViewPlanOrder'.",
				"operationId": "deleteFolder",
				"parameters": [{
						"name": "folderId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/folders": {
			"post": {
				"tags": ["Plan"],
				"summary": "Creates a folder",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createFolder",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The folder to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FolderPropertiesDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/plans/{planId}/state": {
			"put": {
				"tags": ["Plan"],
				"summary": "Changes the state of the plan having the supplied id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ChangePlanAuthorisationState', 'ViewPlanOrder'.",
				"operationId": "setPlanState",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The new plan state",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanStateDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/plans/{planId}": {
			"put": {
				"tags": ["Plan"],
				"summary": "Updates the plan having the supplied Id",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updatePlan",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The plan to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanPropertiesDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Plan"],
				"summary": "Deletes the plan having the supplied Id",
				"description": "Requires authentication.Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'DeletePlanOrder', 'ViewPlanOrder'.",
				"operationId": "deletePlan",
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/plans": {
			"post": {
				"tags": ["Plan"],
				"summary": "Creates a plan",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createPlan",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The plan to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanPropertiesDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/plans/{planId}/{destinationFolderId}": {
			"post": {
				"tags": ["Plan"],
				"summary": "Copies the plan having the supplied Id to another folder",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "copyPlan",
				"produces": ["text/plain"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationFolderId",
						"in": "path",
						"description": "The ID of the destination folder for the copy",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "If not null and not empty the copy will be renamed to newName",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "number"
						}
					}
				}
			},
			"put": {
				"tags": ["Plan"],
				"summary": "Moves the plan having the supplied id to another folder",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'DeletePlanOrder', 'ViewPlanOrder'.",
				"operationId": "movePlan",
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationFolderId",
						"in": "path",
						"description": "The ID of the destination folder for the move",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/folders/{folderId}/{destinationFolderId}": {
			"post": {
				"tags": ["Plan"],
				"summary": "Copies the folder having the supplied Id to another folder",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "copyFolder",
				"parameters": [{
						"name": "folderId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationFolderId",
						"in": "path",
						"description": "The ID of the destination folder for the copy",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"put": {
				"tags": ["Plan"],
				"summary": "Moves the folder having the supplied id to another folder",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'DeletePlanOrder', 'ViewPlanOrder'.",
				"operationId": "moveFolder",
				"parameters": [{
						"name": "folderId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "destinationFolderId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/plans/{sourcePlanId}/createFromExisting": {
			"post": {
				"tags": ["Plan"],
				"summary": "Creates a plan from existing plan",
				"description": "Requires authentication and all of the following privileges: 'CreatePlan', 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createPlanFromSource",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "sourcePlanId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The plan to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PlanPropertiesDto"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/task/{planId}/matrixProperties": {
			"put": {
				"tags": ["Task"],
				"summary": "Updates the matrix properties for the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateMatrixProperties",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The matrix properties to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/MatrixPropertiesDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/task/{planId}/tasks/{taskId}": {
			"put": {
				"tags": ["Task"],
				"summary": "Updates a task in the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updateTask",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "taskId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The task to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdateTaskDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Task"],
				"summary": "Deletes a task in the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deleteTask",
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "taskId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/task/{planId}/tasks": {
			"post": {
				"tags": ["Task"],
				"summary": "Creates a task in the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createTask",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The task to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/CreateTaskDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/task/layers/{layerId}/symbols/{symbolId}/taskDescriptions": {
			"get": {
				"tags": ["Task"],
				"summary": "Gets all tasks for the specified symbol in the specified layer",
				"description": "Requires authentication.",
				"operationId": "getTasksPresentationForSymbol",
				"produces": ["application/json"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "symbolId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TaskPresentationDTO"
							}
						}
					}
				}
			}
		},
		"/v1/plan/task/{planId}/phases/{phaseId}": {
			"put": {
				"tags": ["Task"],
				"summary": "Updates a phase in the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "updatePhase",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The phase to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/UpdatePhaseDTO"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Task"],
				"summary": "Deletes a phase in the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "deletePhase",
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/plan/task/{planId}/phases": {
			"post": {
				"tags": ["Task"],
				"summary": "Creates a phase in the specified plan",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "createPhase",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "planId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The phase to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/CreatePhaseDTO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			}
		},
		"/v1/plan/planElements/textdocuments/{textDocumentId}/html": {
			"get": {
				"tags": ["Plan Text Document"],
				"summary": "Gets an html document",
				"description": "Requires authentication and all of the following privileges: 'ViewPlanOrder'.",
				"operationId": "getHtmlDocument",
				"produces": ["text/html; charset=UTF-8"],
				"parameters": [{
						"name": "textDocumentId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"put": {
				"tags": ["Plan Text Document"],
				"summary": "Imports an html document",
				"description": "Requires authentication and all of the following privileges: 'EditPlan', 'ViewPlanOrder'.",
				"operationId": "importHtmlDocument",
				"consumes": ["text/html; charset=UTF-8"],
				"parameters": [{
						"name": "textDocumentId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "HTML document",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/groups": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Creates a group",
				"description": "payload shall contain the group definition. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "createGroup",
				"consumes": ["application/json"],
				"produces": ["text/plain;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The group to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/GroupInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/filterLayer/{id}": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Gets a filter layer",
				"description": "The list of source layers contained in the filter layer will be filtered according to the callers Access Control List (ACL) permissions. Also note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getFilterLayer",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/FilterLayerInfo"
						}
					}
				}
			},
			"put": {
				"tags": ["Layer Catalogue"],
				"summary": "Updates a filter layer",
				"description": "The payload shall contain the definition of the filter layer that will be used to update the current filter layer. Also note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "updateFilterLayer",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The filter layer to update",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FilterLayerInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Layer Catalogue"],
				"summary": "Deletes a filter layer",
				"description": "Note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "deleteFilterLayer",
				"consumes": ["application/x-www-form-urlencoded"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/{id}/usage": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Returns known usage of the layer. Like number of source layers it has (COP Management Contracts) and if it used in other contracts (AIS, NFFI, NVG, OTG out and ingoing etc).",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "layerUsage",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/LayerUsageDTO"
						}
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/ts/import": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Imports a track layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "importTrackLayer",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The Track Layer Format (TLF/PTLF) XML file content",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/{id}": {
			"put": {
				"tags": ["Layer Catalogue"],
				"summary": "Updates a layer",
				"description": "The payload shall contain the definition of the layer that will be used to update the current definition of the layer. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "updateLayer",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The new layer definition",
						"required": false,
						"schema": {
							"$ref": "#/definitions/WorkspaceInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Layer Catalogue"],
				"summary": "Deletes a layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "deleteLayer",
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/groups/{id}": {
			"put": {
				"tags": ["Layer Catalogue"],
				"summary": "Updates a group",
				"description": "The payload shall contain the definition of the group that will be used to update the current definition of the group. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "updateGroup",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The new group definition",
						"required": false,
						"schema": {
							"$ref": "#/definitions/GroupInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Layer Catalogue"],
				"summary": "Deletes a group",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "deleteGroup",
				"consumes": ["application/x-www-form-urlencoded"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/{layerId}/{groupId}": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Copies a layer including its symbols to a C2 group",
				"description": "A C2 group will always have one of the 5 C2 layer types (e.g. \"Globally Significant\" or \"Friend and Neutral (Organisational)\"). Any layer copied to a C2 group will become a C2 layer with that group type. E.g. if a plan layer is copied to a C2 group of type \"Globally Significant\", then the copy will become a \"Globally Significant\" layer instead of being a plan layer. Any C2 layer or plan layer can be copied to any C2 group (if permissions allows it) and will get the C2 type of the target group. However, layers cannot be copied to plan groups. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "copyLayerToGroup",
				"consumes": ["application/x-www-form-urlencoded"],
				"produces": ["text/plain"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "groupId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/import": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Imports layer from XML format",
				"description": "The layer XML data must adhere to the SitaWare Layer Format (SLF) XML file specification. See the XML schema that is shipped as part of the SDK. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "importLayer",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The SLF XML file content",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/slf": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Exports a list of identified layers to XML",
				"description": "The layer XML data must adhere to the SitaWare Layer Format (SLF) XML file specification. See the XML schema that is shipped as part of the SDK. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "exportLayers",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "A list of layer IDs to export",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"put": {
				"tags": ["Layer Catalogue"],
				"summary": "Imports layers from an XML file",
				"description": "The layer XML data must adhere to the SitaWare Layer Format (SLF) XML file specification. See the XML schema that is shipped as part of the SDK. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "importLayers",
				"consumes": ["application/json"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The contents of the XML file",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FileContents"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/import/{parentKey}": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Imports a C2 layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "importC2Layer",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The SLF XML file content",
						"required": false,
						"schema": {
							"type": "string"
						}
					}, {
						"name": "parentKey",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Gets a catalogue of all layers and groups in the system",
				"description": "Layers and groups are represented in the API with the GroupItemInfo model; in practice, this will be either a group (GroupInfo) or a layer (WorkspaceInfo).This can be seen in the this illustration:<br><img src=\"./images/layercatalogservice.jpg\" alt=\"LayerCatalogue service data types\"><br>Catalogue items are also filtered according to Access Control Lists of the individual group and layers in the layer catalogue. This means that a caller may only get a partial view of the catalogue.<br>Due to issues with our API documentation tool, some models are presented here, instead of in the \"Model\" option below.<br><div class=\"model-signature\"><style>.last-fake-model + div { visibility: hidden; height: 29px; }</style><span class=\"description\"><span class=\"strong\">WorkspaceInfo {</span>\n<div><span class=\"propName \">id</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">index</span> (<span class=\"propType\">integer</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">presentationName</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">presentationPath</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propWrap \"><span class=\"propName \">rolesWithReadAccess</span> (<span class=\"propType\">Array[string]</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">string</th></tr><tr><td class=\"optionName\">Unique Items:</td><td>true</td></tr></tbody></table></span>,</div>\n<div><span class=\"propWrap \"><span class=\"propName \">rolesWithWriteAccess</span> (<span class=\"propType\">Array[string]</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">string</th></tr><tr><td class=\"optionName\">Unique Items:</td><td>true</td></tr></tbody></table></span>,</div>\n<div><span class=\"propWrap \"><span class=\"propName \">rolesWithOwnerAccess</span> (<span class=\"propType\">Array[string]</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">string</th></tr><tr><td class=\"optionName\">Unique Items:</td><td>true</td></tr></tbody></table></span>,</div>\n<div><span class=\"propName \">organisationOwnerId</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propWrap \"><span class=\"propName \">hasOwnerAccess</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span>,</div>\n<div><span class=\"propWrap \"><span class=\"propName \">isOwnRepOrg</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span>,</div>\n<div><span class=\"propName \">parent</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">category</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">fullyQualifiedName</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">restrictedByUser</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">layerType</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>If the 'GroupItemInfo' contains property 'layerType' it is a 'WorkspaceInfo'</p></span>,</div>\n<div><span class=\"propName \">securityClassification</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">securityClassificationPrefix</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">securityClassificationPostfix</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propWrap \"><span class=\"propName \">hasWriteAccess</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span>,</div>\n<div><span class=\"propName \">orgName</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">layerAnnotation</span> (<span class=\"propType\">WorkspaceAnnotation</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propWrap \"><span class=\"propName \">sourceLayers</span> (<span class=\"propType\">Array[FilterLayerSourceLayerInfo]</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>This property is only present for 'Smart Layer / Filter Layers'. These are the net source layers, i.e. a recursive resolved layer list with no filter layers</p>\n</span><table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">object</th></tr><tr><td class=\"optionName\">Unique Items:</td><td>true</td></tr></tbody></table></span>,</div>\n<div><span class=\"propWrap \"><span class=\"propName \">alarmEnabled</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span>,</div>\n<div><span class=\"propName \">trackDecorationDescriptionInfo</span> (<span class=\"propType\">TrackDecorationDescriptionInfo</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">situationOverlayGroupItem</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propWrap \"><span class=\"propName \">hasReadAccess</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span></div>\n<span class=\"strong\">}</span></span><br><span class=\"description\"><span class=\"strong\">WorkspaceAnnotation {</span><div><span class=\"propName \">exerciseOrOperationInfo</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">msgId</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">msgIdOriginator</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">msgIdSerialNumber</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">msgIdAmplification</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">msgIdMonth</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">sourceIdentifier</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">startTime</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">stopTime</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">startTimeMils</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">stopTimeMils</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">geoDaticDatum</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">textIndicator</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">freeText</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">status</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">classification</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">url</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">shortDescription</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">longDescription</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>)</div>\n<span class=\"strong\">}</span></span><br><span class=\"description\"><span class=\"strong\">FilterLayerSourceLayerInfo {</span>\n<div><span class=\"propName \">layerType</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">category</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">id</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">name</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propWrap\"><span class=\"propName \">hasWriteAccess</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span>,</div>\n<div><span class=\"propWrap\"><span class=\"propName \">hasReadAccess</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span>,</div>\n<div><span class=\"propName \">restrictedByUser</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>On private layers, this property indicates the user</p></span>,</div>\n<div><span class=\"propWrap\"><span class=\"propName \">rolesWithReadAccess</span> (<span class=\"propType\">Array[string]</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">string</th></tr><tr><td class=\"optionName\">Unique Items:</td><td>true</td></tr></tbody></table></span>,</div>\n<div><span class=\"propWrap\"><span class=\"propName \">rolesWithWriteAccess</span> (<span class=\"propType\">Array[string]</span>, <span class=\"propOptKey\">optional</span>)<table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">string</th></tr><tr><td class=\"optionName\">Unique Items:</td><td>true</td></tr></tbody></table></span>,</div>\n<div><span class=\"propName \">objectCount</span> (<span class=\"propType\">integer</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>The number of objects on layer</p></span>,</div>\n<div><span class=\"propName \">filteredObjectCount</span> (<span class=\"propType\">integer</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>The number of filtered objects on layer</p></span>,</div>\n<div><span class=\"propWrap\"><span class=\"propName \">exists</span> (<span class=\"propType\">boolean</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>Wheather layer exists</p>\n</span><table class=\"optionsWrapper\" style=\"display: none;\"><tbody><tr><th colspan=\"2\">boolean</th></tr><tr><td class=\"optionName\">Default:</td><td>false</td></tr></tbody></table></span></div>\n<span class=\"strong\">}</span></span><br><span class=\"description last-fake-model\"><span class=\"strong\">TrackDecorationDescriptionInfo {</span>\n<div><span class=\"propName \">styleExpression</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>),</div>\n<div><span class=\"propName \">size</span> (<span class=\"propType\">string</span>, <span class=\"propOptKey\">optional</span>): <span class=\"propDesc markdown\"><p>Internal use only - will be deleted in a later version</p></span></div>\n<span class=\"strong\">}</span></span></div>. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getCatalogue",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "revalidateCache",
						"in": "query",
						"description": "Indicates whether the server side cache should be rebuilt.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/WorkspaceCatalogueInfo"
						}
					}
				}
			}
		},
		"/v1/layerCatalogue/layers": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Creates a new layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "createLayer",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The layer data to create the layer from",
						"required": false,
						"schema": {
							"$ref": "#/definitions/WorkspaceInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/{id}/acl": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Gets Access Control List (ACL) permissions for a layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getLayerAclPermissions",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AclPermissionInfo"
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Layer Catalogue"],
				"summary": "Sets the Access Control List (ACL) permissions for a layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "setLayerAclPermissions",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "The ACL permissions for the layer",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AclPermissionInfo"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/filterLayer/mayCreate": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Determines whether a filter layer can be created",
				"description": "Note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "mayCreateFilterLayer",
				"consumes": ["application/json"],
				"parameters": [],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/groups/{id}/acl": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Get Access Control List (ACL) permissions for a group",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getGroupAclPermissions",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AclPermissionInfo"
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Layer Catalogue"],
				"summary": "Sets the Access Control List (ACL) permissions for a group",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "setGroupAclPermissions",
				"consumes": ["application/json"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"description": "A list of ACL permissions to set to a group",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AclPermissionInfo"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/ts/{id}/export": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Exports a Track layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "exportTrackLayerById",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/FileContents"
						}
					}
				}
			}
		},
		"/v1/layerCatalogue/filterLayer": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Creates a filter layer",
				"description": "The payload shall contain the definition of the filter layer that will be used to create the new filter layer. Also note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "createFilterLayer",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The filter layer to create",
						"required": false,
						"schema": {
							"$ref": "#/definitions/CreateFilterLayerInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/sl/{id}/export": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Exports a Smart layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "exportSmartLayerById",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/FileContents"
						}
					}
				}
			}
		},
		"/v1/layerCatalogue/filterLayer/import": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Imports a filter layer",
				"description": "Note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "importFilterLayer",
				"consumes": ["application/json"],
				"produces": ["text/plain"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The filter layer to import",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FilterLayerInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layerCatalogue/layers/c2/{id}/export": {
			"get": {
				"tags": ["Layer Catalogue"],
				"summary": "Exports C2 layers",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "exportC2LayerById",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/FileContents"
						}
					}
				}
			}
		},
		"/v1/layerCatalogue/filterLayerResult": {
			"post": {
				"tags": ["Layer Catalogue"],
				"summary": "Evaluates a filter layer and returns information on how many symbols that matches the filter",
				"description": "Note, that filter layers are also called smart layers. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "evaluateFilterLayer",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The filter layer to evaluate",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FilterLayerInfo"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layers/{layerId}/symbols/{symbolId}": {
			"get": {
				"tags": ["Symbol"],
				"summary": "Gets a symbol from a given layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getSymbol",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "symbolId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "type",
						"in": "query",
						"description": "The symbol type",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/SymbolDto"
						}
					}
				}
			},
			"put": {
				"tags": ["Symbol"],
				"summary": "Updates a symbol",
				"description": "The payload shall contain the definition of the symbol that will be used to update the current definition of the symbol.\nThe symbol data that is passed to the method must have the same type as the layer, e.g. if the layer is an NVG type \nlayer, then the symbol data should represent an NVG symbol. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "updateSymbol",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "symbolId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SymbolDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			},
			"delete": {
				"tags": ["Symbol"],
				"summary": "Deletes a symbol",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "deleteSymbol",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "symbolId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/layers/{layerId}/symbols": {
			"get": {
				"tags": ["Symbol"],
				"summary": "Gets all symbols from a given layer",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getSymbols",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SymbolDto"
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Symbol"],
				"summary": "Creates a symbol on a given layer",
				"description": "The symbol data that is passed to the method must have the same type as the layer, e.g. if the layer is an NVG type layer, then the symbol data should represent an NVG symbol. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "createSymbol",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SymbolDto"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/route/{layerId}/import": {
			"post": {
				"tags": ["Symbol"],
				"summary": "Imports a GPS route from a .GPX file",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "importRouteFromGpx",
				"consumes": ["application/json"],
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "The GPX XML file content",
						"required": false,
						"schema": {
							"type": "string"
						}
					}, {
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/v1/symbols/configuredEnums": {
			"get": {
				"tags": ["Symbol"],
				"summary": "Gets the configured enumerations",
				"description": "Some of the property values that can be set on a symbol are configurable on the server and this method returns these configurable values. Requires authentication and the privilege 'track-server-user'.",
				"operationId": "getConfiguredEnums",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/ConfiguredEnumsDto"
						}
					}
				}
			}
		},
		"/v1/layers/{layerId}/symbols/{symbolId}/exists": {
			"get": {
				"tags": ["Symbol"],
				"summary": "Returns a boolean indicating whether the symbol with the specified id exists",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "isSymbolExists",
				"produces": ["text/plain"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "symbolId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"/v1/route/{layerId}/export/{routeId}": {
			"get": {
				"tags": ["Symbol"],
				"summary": "Exports a route",
				"description": "Requires authentication and the privilege 'track-server-user'.",
				"operationId": "exportRoute",
				"produces": ["application/json;charset=utf-8"],
				"parameters": [{
						"name": "layerId",
						"in": "path",
						"required": true,
						"type": "string"
					}, {
						"name": "routeId",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/FileContents"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"AddRemoveNominalHoldingTypesForOrbatDTO": {
			"type": "object",
			"properties": {
				"holdingTypesToAdd": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CreateHoldingTypeDTO"
					}
				},
				"holdingTypesToRemove": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HoldingTypeDTO"
					}
				}
			}
		},
		"CreateHoldingTypeDTO": {
			"type": "object",
			"required": ["category", "holdingClass", "name"],
			"properties": {
				"category": {
					"type": "string"
				},
				"holdingClass": {
					"type": "string"
				},
				"holdingSubClass": {
					"type": "string"
				},
				"holdingSubSubClass": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"unitOfMeasure": {
					"type": "string"
				}
			}
		},
		"HoldingTypeDTO": {
			"type": "object",
			"properties": {
				"holdingTypeId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"holdingClass": {
					"type": "string"
				},
				"holdingSubClass": {
					"type": "string"
				},
				"holdingSubSubClass": {
					"type": "string"
				},
				"unitOfMeasure": {
					"type": "string"
				}
			}
		},
		"CustomDataDTO": {
			"type": "object",
			"properties": {
				"key": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"NominalHoldingTemplateDTO": {
			"type": "object",
			"properties": {
				"holdingType": {
					"$ref": "#/definitions/HoldingTypeDTO"
				},
				"quantity": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"OrbatElementDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"fullyQualifiedName": {
					"type": "string"
				},
				"alternativeName": {
					"type": "string"
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				},
				"subordinateKeys": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"index": {
					"type": "integer",
					"format": "int32"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"nominalHoldings": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NominalHoldingTemplateDTO"
					}
				},
				"loadedSubordinates": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrbatElementDTO"
					}
				}
			}
		},
		"MoveOrbatElementDTO": {
			"type": "object",
			"properties": {
				"destinationId": {
					"type": "string"
				},
				"position": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"ArrayOfKeyDTO": {
			"type": "object",
			"properties": {
				"keys": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PasteOrbatDTO": {
			"type": "object",
			"properties": {
				"sourceId": {
					"type": "string"
				}
			}
		},
		"HoldingTypeWithQuantityDTO": {
			"type": "object",
			"properties": {
				"holdingTypeId": {
					"type": "string"
				},
				"quantity": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"UpdateNominalHoldingDTO": {
			"type": "object",
			"properties": {
				"nominalHolding": {
					"$ref": "#/definitions/NominalHoldingTemplateDTO"
				}
			}
		},
		"DeleteNominalHoldingDTO": {
			"type": "object",
			"properties": {
				"nominalHoldings": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HoldingTypeDTO"
					}
				}
			}
		},
		"OrbatListingDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"hostility": {
					"type": "string"
				},
				"creationTime": {
					"type": "string",
					"format": "date-time"
				},
				"modifyTime": {
					"type": "string",
					"format": "date-time"
				},
				"ownerOrganization": {
					"type": "string"
				},
				"isActive": {
					"type": "boolean"
				}
			}
		},
		"OrbatDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"creationTime": {
					"type": "string",
					"format": "date-time"
				},
				"modifyTime": {
					"type": "string",
					"format": "date-time"
				},
				"hostility": {
					"type": "string"
				},
				"ownerOrganisationKey": {
					"type": "string"
				},
				"parentRelationship": {
					"type": "string"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"rootOrg": {
					"$ref": "#/definitions/OrbatElementDTO"
				}
			}
		},
		"AddRemoveNominalHoldingTypesForOrbatDTOByFQN": {
			"type": "object",
			"properties": {
				"holdingTypesToAdd": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"holdingTypesToRemove": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PermissionDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"canView": {
					"type": "boolean"
				},
				"canEdit": {
					"type": "boolean"
				},
				"isOwner": {
					"type": "boolean"
				}
			}
		},
		"PictureDTO": {
			"type": "object",
			"properties": {
				"pictureId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"canEdit": {
					"type": "boolean"
				},
				"isOwner": {
					"type": "boolean"
				},
				"subComponents": {
					"type": "array",
					"example": "[[2, \"default:61293a08-1b15-4a50-829c-a70400d62aa4\"]]",
					"description": "An entry in the array is a pair of layerType and layerId e.g.:\n [[2,\"default:61293a08-1b15-4a50-829c-a70400d62aa4\"]]",
					"items": {
						"$ref": "#/definitions/Tuple2ObjectString"
					}
				},
				"subComponentsOrders": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PictureSubComponentOrderDTO"
					}
				},
				"aclPermissions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PermissionDTO"
					}
				},
				"version": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"PictureSubComponentOrderDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"position": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"Tuple2": {
			"type": "object",
			"properties": {
				"_1": {
					"type": "number"
				},
				"_2": {
					"type": "number"
				}
			}
		},
		"Tuple2ObjectString": {
			"type": "object",
			"properties": {
				"_1": {
					"type": "number"
				},
				"_2": {
					"type": "string"
				}
			}
		},
		"TaskOrganisationElementDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"fullyQualifiedName": {
					"type": "string"
				},
				"alternativeName": {
					"type": "string"
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				},
				"subordinateKeys": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"index": {
					"type": "integer",
					"format": "int32"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"loadedSubordinates": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TaskOrganisationElementDTO"
					}
				},
				"reinforcement": {
					"type": "string"
				},
				"reductionRelationships": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TaskOrganisationElementRelationshipDTO"
					}
				},
				"reinforcementRelationships": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TaskOrganisationElementRelationshipDTO"
					}
				}
			}
		},
		"TaskOrganisationElementRelationshipDTO": {
			"type": "object"
		},
		"PlannedRelationshipDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"commandControlRelationship": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"reducedName": {
					"type": "string"
				},
				"reinforcedName": {
					"type": "string"
				},
				"organisationType": {
					"$ref": "#/definitions/SymbolCodeDTO"
				},
				"relationShipType": {
					"type": "string"
				}
			}
		},
		"SymbolCodeDTO": {
			"type": "object",
			"properties": {
				"mainSymbolCode": {
					"type": "string"
				},
				"subtypeCode": {
					"type": "string"
				}
			}
		},
		"TaskOrgDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"rootOrg": {
					"$ref": "#/definitions/TaskOrganisationElementDTO"
				}
			}
		},
		"UnitHoldingReportsDTO": {
			"type": "object",
			"properties": {
				"unitWithHoldingReports": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UnitWithHoldingReportDTO"
					}
				}
			}
		},
		"UnitWithHoldingReportDTO": {
			"type": "object",
			"properties": {
				"fqn": {
					"type": "string"
				},
				"report": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HoldingTypeWithQuantityDTO"
					}
				}
			}
		},
		"HoldingCompositeDTO": {
			"type": "object",
			"properties": {
				"holdingType": {
					"$ref": "#/definitions/HoldingTypeDTO"
				},
				"actualQuantity": {
					"type": "integer",
					"format": "int32"
				},
				"nominalQuantity": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"LastHoldingReportDTO": {
			"type": "object",
			"properties": {
				"fqn": {
					"type": "string"
				},
				"lastHoldingReportTime": {
					"type": "string",
					"format": "date-time"
				},
				"holdings": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/HoldingCompositeDTO"
					}
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				},
				"unitName": {
					"type": "string"
				}
			}
		},
		"ActualHoldingItemContentDTO": {
			"type": "object",
			"properties": {
				"actualQuantity": {
					"type": "integer",
					"format": "int32"
				},
				"inTemplate": {
					"type": "boolean"
				}
			}
		},
		"ActualHoldingTypeWithContentDTO": {
			"type": "object",
			"properties": {
				"holdingTypeId": {
					"type": "string"
				},
				"content": {
					"$ref": "#/definitions/ActualHoldingItemContentDTO"
				}
			}
		},
		"Contains legal units of measure and a tree of valid combinations of holdings type categories, classes, subsclasses and subsubclasses": {
			"type": "object",
			"properties": {
				"unitsOfMeasure": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"legalValuesMap": {
					"type": "object",
					"description": "The tree has four levels representing category, class, subclass and subsubclass values respectively.\r\n      Valid values for particular property(category, class, subclass) are children of that property.\r\n      If property does not have any children, the holding type cannot be specified any further. For example\r\n      the list of allowed subclasses for the class PersonalEquipment from the Consumable category can be\r\n      retrieved as\r\n\r\n      legalValuesMap['Consumable']['PersonalEquipment'].",
					"additionalProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "object",
							"additionalProperties": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"OwnUnitDTO": {
			"type": "object",
			"properties": {
				"fqn": {
					"type": "string"
				},
				"displayName": {
					"type": "string"
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				},
				"subordinates": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/SubordinateUnitDTO"
					}
				}
			}
		},
		"SubordinateUnitDTO": {
			"type": "object",
			"properties": {
				"fqn": {
					"type": "string"
				},
				"displayName": {
					"type": "string"
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				}
			}
		},
		"UnitDTO": {
			"type": "object",
			"properties": {
				"fqn": {
					"type": "string"
				},
				"displayName": {
					"type": "string"
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				},
				"latitude": {
					"type": "number",
					"format": "double"
				},
				"longitude": {
					"type": "number",
					"format": "double"
				},
				"lastReported": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"ExtendedInformationDto": {
			"type": "object",
			"required": ["key", "value"],
			"properties": {
				"key": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"LogDto": {
			"type": "object",
			"required": ["message", "severity"],
			"properties": {
				"message": {
					"type": "string"
				},
				"severity": {
					"type": "string",
					"enum": ["Debug", "Info", "Warning", "Error"]
				},
				"extendedInformation": {
					"type": "array",
					"description": "Custom information about the log entry",
					"items": {
						"$ref": "#/definitions/ExtendedInformationDto"
					}
				}
			}
		},
		"MappingOutputDto": {
			"type": "object",
			"required": ["log", "parameters"],
			"properties": {
				"parameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MappingParameterDto"
					}
				},
				"log": {
					"type": "array",
					"description": "Message log output from the mapping",
					"items": {
						"$ref": "#/definitions/LogDto"
					}
				}
			}
		},
		"MappingParameterDto": {
			"type": "object",
			"required": ["name", "value"],
			"properties": {
				"name": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"MappingInputDto": {
			"type": "object",
			"required": ["parameters"],
			"properties": {
				"parameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MappingParameterDto"
					}
				}
			}
		},
		"LayerInfoDto": {
			"type": "object",
			"required": ["layerType"],
			"properties": {
				"layerType": {
					"type": "string",
					"enum": ["ACO", "AIS", "C2", "Link16", "NFFI", "NVG", "OTH Gold", "FSCM", "FFT"]
				},
				"supportsSmartLayer": {
					"type": "boolean",
					"description": "Indicates whether smart layers that have source layers of the specified layer type are supported by the paramter"
				}
			}
		},
		"MappingDto": {
			"type": "object",
			"required": ["id", "inputParameters", "outputParameters"],
			"properties": {
				"id": {
					"type": "string",
					"description": "The id of the mapping"
				},
				"inputParameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MappingParameterDefinitionDto"
					}
				},
				"outputParameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MappingParameterDefinitionDto"
					}
				}
			}
		},
		"MappingListDto": {
			"type": "object",
			"required": ["mappings"],
			"properties": {
				"mappings": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MappingDto"
					}
				}
			}
		},
		"MappingParameterDefinitionDto": {
			"type": "object",
			"required": ["name", "type"],
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the mapping parameter"
				},
				"type": {
					"type": "string",
					"description": "The type of data expected or output by the parameter",
					"enum": ["Layer", "StructuredMessage", "String"]
				},
				"messageInformation": {
					"description": "Only present if 'type' is 'StructuredMessage': Additional information about the structured message type",
					"$ref": "#/definitions/StructuredMessageInfoDto"
				},
				"layerInformation": {
					"description": "Only present if 'type' is 'Layer': Additional information about layer type",
					"$ref": "#/definitions/LayerInfoDto"
				},
				"defaultValue": {
					"type": "string",
					"description": "Default value being used if a value for this parameter is not specified when executing the mapping"
				}
			}
		},
		"StructuredMessageInfoDto": {
			"type": "object",
			"required": ["baseline", "format", "identifier", "nameFromStandard"],
			"properties": {
				"nameFromStandard": {
					"type": "string",
					"description": "The name of the basic structured message template, e.g. 'OWNSITREP'"
				},
				"identifier": {
					"type": "string",
					"description": "The identifier of the schema containing the structured message template, e.g. 'urn:int:systematic:mtf:irisdemo:7.2' or '0599999999'"
				},
				"baseline": {
					"type": "string",
					"description": "The baseline of the structured message template, e.g. 'irisdemo 7.2'"
				},
				"format": {
					"type": "string",
					"description": "The format of the structured message.",
					"enum": ["Mtf", "XmlMtf", "Binary", "BinaryWithHeader"]
				}
			}
		},
		"PlanElementLayerPropertiesDto": {
			"type": "object",
			"required": ["include", "name", "parentId", "securityClassification"],
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"securityClassification": {
					"type": "string",
					"enum": ["0 = Null", "1 = Unmarked", "2 = Unclassified", "3 = Restricted", "4 = Confidential", "5 = Secret", "6 = Top Secret"]
				},
				"securityClassificationPrefix": {
					"type": "string"
				},
				"securityClassificationPostfix": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"path": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the layer"
				},
				"developmentState": {
					"type": "string",
					"description": "The state of the layer"
				},
				"c2Id": {
					"type": "string"
				},
				"include": {
					"type": "boolean"
				},
				"customData": {
					"type": "array",
					"description": "The list of custom data",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"index": {
					"type": "integer",
					"format": "int64"
				},
				"editPermissions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PlanElementTaskOrgPropertiesDto": {
			"type": "object",
			"required": ["include", "name", "parentId"],
			"properties": {
				"id": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the task org"
				},
				"name": {
					"type": "string"
				},
				"path": {
					"type": "string"
				},
				"developmentState": {
					"type": "string",
					"description": "The state of the task org"
				},
				"c2Id": {
					"type": "string",
					"description": "The ID of the task org on the C2 Server"
				},
				"include": {
					"type": "boolean"
				},
				"customData": {
					"type": "array",
					"description": "The list of custom data",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"index": {
					"type": "integer",
					"format": "int64"
				},
				"editPermissions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PlanElementStateDto": {
			"type": "object",
			"properties": {
				"stateId": {
					"type": "string",
					"example": "0",
					"description": "0 = Draft, 1 = Approval in progress, 2 = Approved, 3 = Issued, 4 = Cancelled"
				}
			}
		},
		"PlanElementTextDocumentDto": {
			"type": "object",
			"required": ["include", "name", "parentId"],
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"path": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the text document"
				},
				"developmentState": {
					"type": "string",
					"description": "The state of the text document"
				},
				"isLocked": {
					"type": "boolean"
				},
				"lockedBy": {
					"type": "string",
					"description": "The user that has the lock of the text document"
				},
				"size": {
					"type": "integer",
					"format": "int64",
					"description": "The size of the text document"
				},
				"include": {
					"type": "boolean",
					"description": "Wheather the text document is included in export"
				},
				"c2PlanDocumentId": {
					"type": "string"
				},
				"customData": {
					"type": "array",
					"description": "The list of custom data",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"index": {
					"type": "integer",
					"format": "int64"
				},
				"editPermissions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PlanElementSynchronizationMatrixDto": {
			"type": "object",
			"required": ["parentId"],
			"properties": {
				"id": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the synchronization matrix"
				},
				"developmentState": {
					"type": "string",
					"description": "The state of the synchronization matrix"
				},
				"index": {
					"type": "integer",
					"format": "int64"
				},
				"editPermissions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PlanElementFileDto": {
			"type": "object",
			"required": ["include", "name", "parentId"],
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"path": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the file"
				},
				"developmentState": {
					"type": "string",
					"description": "The state of the file"
				},
				"isLocked": {
					"type": "boolean"
				},
				"lockedBy": {
					"type": "string"
				},
				"size": {
					"type": "integer",
					"format": "int64",
					"description": "The size of the file"
				},
				"include": {
					"type": "boolean"
				},
				"customData": {
					"type": "array",
					"description": "The list of custom data",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				},
				"index": {
					"type": "integer",
					"format": "int64"
				},
				"editPermissions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PlanElementFolderPropertiesDto": {
			"type": "object",
			"required": ["name", "parentId"],
			"properties": {
				"id": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the folder"
				},
				"name": {
					"type": "string"
				},
				"path": {
					"type": "string"
				},
				"isEmpty": {
					"type": "boolean"
				},
				"c2PlanDocumentId": {
					"type": "string"
				},
				"index": {
					"type": "integer",
					"format": "int64"
				},
				"editPermissions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ListPlanElementIndexPropertyDto": {
			"type": "object",
			"properties": {
				"empty": {
					"type": "boolean"
				},
				"traversableAgain": {
					"type": "boolean"
				}
			}
		},
		"ListPlanElementIncludePropertyDto": {
			"type": "object",
			"properties": {
				"empty": {
					"type": "boolean"
				},
				"traversableAgain": {
					"type": "boolean"
				}
			}
		},
		"LockedDto": {
			"type": "object",
			"properties": {
				"locked": {
					"type": "boolean"
				}
			}
		},
		"FolderPropertiesDto": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"parentFolderId": {
					"type": "string"
				},
				"version": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				},
				"aclPermissions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PermissionDTO"
					}
				},
				"canEdit": {
					"type": "boolean"
				},
				"isOwner": {
					"type": "boolean"
				}
			}
		},
		"PlanStateDto": {
			"type": "object",
			"properties": {
				"stateId": {
					"type": "string"
				},
				"stateComment": {
					"type": "string"
				},
				"stateCommentName": {
					"type": "string"
				},
				"stateIssuingHQ": {
					"type": "string"
				}
			}
		},
		"PlanPropertiesDto": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"parentFolderId": {
					"type": "string"
				},
				"areaOfOperation": {
					"type": "string"
				},
				"issuingHeadquarter": {
					"type": "string"
				},
				"messageReferenceNumber": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"nickname": {
					"type": "string"
				},
				"placeOfIssue": {
					"type": "string"
				},
				"reference": {
					"type": "string"
				},
				"securityClassification": {
					"type": "string"
				},
				"securityClassificationPrefix": {
					"type": "string"
				},
				"securityClassificationPostfix": {
					"type": "string"
				},
				"timeZone": {
					"type": "string"
				},
				"typeOfOperation": {
					"type": "string"
				},
				"otherFunctionalCommand": {
					"type": "string"
				},
				"serialNumber": {
					"type": "string"
				},
				"issued": {
					"type": "string",
					"format": "date-time"
				},
				"typeOfPlanOrder": {
					"type": "string"
				},
				"planStateLastModifiedBy": {
					"type": "string"
				},
				"planStateLastModified": {
					"type": "string",
					"format": "date-time"
				},
				"stateHistory": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/StateHistoryEntry"
					}
				},
				"developmentStatus": {
					"type": "string"
				},
				"lastModifiedBy": {
					"type": "string",
					"description": "The user that last modified element "
				},
				"lastModified": {
					"type": "string",
					"format": "date-time",
					"description": "The date of the last modification of the element"
				},
				"version": {
					"type": "integer",
					"format": "int64",
					"description": "The version of the plan"
				},
				"aclPermissions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/PermissionDTO"
					}
				},
				"canEdit": {
					"type": "boolean"
				},
				"isOwner": {
					"type": "boolean"
				},
				"c2PlanId": {
					"type": "string"
				},
				"c2PlanTimestamp": {
					"type": "string",
					"format": "date-time"
				},
				"timeUnit": {
					"type": "string"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				}
			}
		},
		"StateHistoryEntry": {
			"type": "object",
			"properties": {
				"userName": {
					"type": "string"
				},
				"alternativeUserName": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"planState": {
					"type": "string"
				},
				"timeStamp": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"AfterPhaseDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"ColourLegendDTO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"colour": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"MatrixPropertiesDTO": {
			"type": "object",
			"properties": {
				"rootPhases": {
					"$ref": "#/definitions/RootPhasesDTO"
				},
				"colourLegends": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColourLegendDTO"
					}
				}
			}
		},
		"RootPhaseDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				}
			}
		},
		"RootPhasesDTO": {
			"type": "object",
			"properties": {
				"beforePhase": {
					"$ref": "#/definitions/RootPhaseDTO"
				},
				"duringPhase": {
					"$ref": "#/definitions/RootPhaseDTO"
				},
				"afterPhase": {
					"$ref": "#/definitions/AfterPhaseDTO"
				}
			}
		},
		"TaskSymbolIdDTO": {
			"type": "object",
			"properties": {
				"layerId": {
					"type": "string"
				},
				"symbolId": {
					"type": "string"
				}
			}
		},
		"UpdateTaskDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"activitySymbol": {
					"$ref": "#/definitions/TaskSymbolIdDTO"
				},
				"objectiveSymbols": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TaskSymbolIdDTO"
					}
				},
				"resourceIds": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"startTime": {
					"type": "integer",
					"format": "int32"
				},
				"endTime": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string"
				},
				"category": {
					"type": "integer",
					"format": "int32"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				}
			}
		},
		"CreateTaskDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"activitySymbol": {
					"$ref": "#/definitions/TaskSymbolIdDTO"
				},
				"objectiveSymbols": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TaskSymbolIdDTO"
					}
				},
				"resourceIds": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"startTime": {
					"type": "integer",
					"format": "int32"
				},
				"endTime": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string"
				},
				"category": {
					"type": "integer",
					"format": "int32"
				},
				"customData": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomDataDTO"
					}
				}
			}
		},
		"TaskPresentationDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "integer",
					"format": "int32"
				},
				"endTime": {
					"type": "integer",
					"format": "int32"
				},
				"timeUnit": {
					"type": "string"
				},
				"activitySymbolCode": {
					"type": "string"
				},
				"category": {
					"type": "string"
				}
			}
		},
		"UpdatePhaseDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"CreatePhaseDTO": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "integer",
					"format": "int32"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"FilterLayerSourceLayerInfo": {
			"type": "object",
			"properties": {
				"layerType": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"hasWriteAccess": {
					"type": "boolean"
				},
				"hasReadAccess": {
					"type": "boolean"
				},
				"restrictedByUser": {
					"type": "string",
					"description": "On private layers, this property indicates the user"
				},
				"rolesWithReadAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"rolesWithWriteAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"objectCount": {
					"type": "integer",
					"format": "int32",
					"description": "The number of objects on layer"
				},
				"filteredObjectCount": {
					"type": "integer",
					"format": "int32",
					"description": "The number of filtered objects on layer"
				},
				"exists": {
					"type": "boolean",
					"description": "Wheather layer exists"
				}
			}
		},
		"GroupInfo": {
			"allOf": [{
					"$ref": "#/definitions/GroupItemInfo"
				}, {
					"type": "object",
					"properties": {
						"groupType": {
							"type": "string",
							"description": "If the 'GroupItemInfo' contains property 'groupType' it is a 'GroupInfo'"
						},
						"items": {
							"type": "array",
							"description": "'GroupItemInfo' can either be a 'WorkspaceInfo' or 'GroupInfo'",
							"items": {
								"$ref": "#/definitions/GroupItemInfo"
							}
						}
					}
				}
			]
		},
		"GroupItemInfo": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"index": {
					"type": "integer",
					"format": "int32"
				},
				"presentationName": {
					"type": "string"
				},
				"presentationPath": {
					"type": "string"
				},
				"rolesWithReadAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"rolesWithWriteAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"rolesWithOwnerAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"organisationOwnerId": {
					"type": "string"
				},
				"hasOwnerAccess": {
					"type": "boolean"
				},
				"isOwnRepOrg": {
					"type": "boolean"
				},
				"parent": {
					"type": "string"
				},
				"category": {
					"type": "string"
				},
				"fullyQualifiedName": {
					"type": "string"
				},
				"restrictedByUser": {
					"type": "string"
				}
			}
		},
		"TrackDecorationDescriptionInfo": {
			"type": "object",
			"properties": {
				"styleExpression": {
					"type": "string"
				},
				"size": {
					"type": "string",
					"description": "Internal use only - will be deleted in a later version"
				}
			}
		},
		"WorkspaceAnnotation": {
			"type": "object",
			"properties": {
				"exerciseOrOperationInfo": {
					"type": "string"
				},
				"msgId": {
					"type": "string"
				},
				"msgIdOriginator": {
					"type": "string"
				},
				"msgIdSerialNumber": {
					"type": "string"
				},
				"msgIdAmplification": {
					"type": "string"
				},
				"msgIdMonth": {
					"type": "string"
				},
				"sourceIdentifier": {
					"type": "string"
				},
				"startTime": {
					"type": "string"
				},
				"stopTime": {
					"type": "string"
				},
				"startTimeMils": {
					"type": "string"
				},
				"stopTimeMils": {
					"type": "string"
				},
				"geoDaticDatum": {
					"type": "string"
				},
				"textIndicator": {
					"type": "string"
				},
				"freeText": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"classification": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"shortDescription": {
					"type": "string"
				},
				"longDescription": {
					"type": "string"
				}
			}
		},
		"WorkspaceInfo": {
			"allOf": [{
					"$ref": "#/definitions/GroupItemInfo"
				}, {
					"type": "object",
					"properties": {
						"layerType": {
							"type": "string",
							"description": "If the 'GroupItemInfo' contains property 'layerType' it is a 'WorkspaceInfo'"
						},
						"securityClassification": {
							"type": "string"
						},
						"securityClassificationPrefix": {
							"type": "string"
						},
						"securityClassificationPostfix": {
							"type": "string"
						},
						"hasWriteAccess": {
							"type": "boolean"
						},
						"orgName": {
							"type": "string"
						},
						"layerAnnotation": {
							"$ref": "#/definitions/WorkspaceAnnotation"
						},
						"sourceLayers": {
							"type": "array",
							"description": "This property is only present for 'Smart Layer / Filter Layers'. These are the netto source layers, i.e. a recursive resolved layer list with no filter layers",
							"uniqueItems": true,
							"items": {
								"$ref": "#/definitions/FilterLayerSourceLayerInfo"
							}
						},
						"alarmEnabled": {
							"type": "boolean"
						},
						"trackDecorationDescriptionInfo": {
							"$ref": "#/definitions/TrackDecorationDescriptionInfo"
						},
						"shcUsage": {
							"type": "string"
						},
						"hasReadAccess": {
							"type": "boolean"
						},
						"situationOverlayGroupItem": {
							"type": "string"
						}
					}
				}
			]
		},
		"FilterLayerAlarmInfo": {
			"type": "object",
			"properties": {
				"soundName": {
					"type": "string",
					"description": "The sound name of alarm"
				},
				"text": {
					"type": "string",
					"description": "Alarm text"
				},
				"condition": {
					"type": "integer",
					"format": "int32",
					"description": "Alarm condition. One of: [NEVER, ENTER, EXIT, MOVE]"
				}
			}
		},
		"FilterLayerInfo": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"rolesWithReadAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"rolesWithOwnerAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"restrictedByUser": {
					"type": "string",
					"description": "Internal use only - will be deleted in later version"
				},
				"hasOwnerAccess": {
					"type": "boolean",
					"description": "Whether current user has owner access to layer"
				},
				"hasReadAccess": {
					"type": "boolean",
					"description": "Whether current user has read access to layer"
				},
				"hasWriteAccess": {
					"type": "boolean",
					"description": "Whether current user has write access to layer"
				},
				"filterDescription": {
					"description": "Filter description of layer",
					"$ref": "#/definitions/FilterNodeDto"
				},
				"sourceLayers": {
					"type": "array",
					"description": "The source layers of filter layer",
					"uniqueItems": true,
					"items": {
						"$ref": "#/definitions/FilterLayerSourceLayerInfo"
					}
				},
				"alarm": {
					"description": "The layer alarm",
					"$ref": "#/definitions/FilterLayerAlarmInfo"
				},
				"trackDecorationDescriptionInfo": {
					"description": "The decoration description for layer",
					"$ref": "#/definitions/TrackDecorationDescriptionInfo"
				}
			}
		},
		"FilterNodeDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"operator": {
					"type": "integer",
					"format": "int32"
				},
				"property": {
					"type": "integer",
					"format": "int32"
				},
				"attributeName": {
					"type": "string"
				},
				"text": {
					"type": "string"
				},
				"min": {
					"type": "number",
					"format": "double"
				},
				"max": {
					"type": "number",
					"format": "double"
				},
				"date": {
					"type": "integer",
					"format": "int64",
					"description": "Node date value in milliseconds since 01/01/1970"
				},
				"timeOffset": {
					"type": "integer",
					"format": "int64",
					"description": "Time offset for node"
				},
				"ids": {
					"type": "array",
					"description": "Node references to other objects",
					"items": {
						"type": "string"
					}
				},
				"coordinates": {
					"type": "array",
					"description": "Internal use only - will be deleted in later version",
					"items": {
						"type": "number",
						"format": "float"
					}
				},
				"nodes": {
					"type": "array",
					"description": "Sub nodes",
					"items": {
						"$ref": "#/definitions/FilterNodeDto"
					}
				},
				"customAttributes": {
					"type": "object",
					"description": "Key/value pairs of strings holding custom attributes, see 'Custom Attributes' section in Programmer's Guide"
				}
			}
		},
		"LayerUsageDTO": {
			"type": "object",
			"properties": {
				"layerId": {
					"type": "string"
				},
				"exists": {
					"type": "boolean"
				},
				"shc": {
					"type": "boolean"
				},
				"sourceLayers": {
					"type": "integer",
					"format": "int32"
				},
				"ingoingContracts": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"FileContents": {
			"type": "object",
			"properties": {
				"fileContents": {
					"type": "string"
				}
			}
		},
		"WorkspaceCatalogueInfo": {
			"type": "object",
			"properties": {
				"filterLayers": {
					"$ref": "#/definitions/GroupInfo"
				},
				"privateLayers": {
					"$ref": "#/definitions/GroupInfo"
				},
				"ownOrganizationTrackLayers": {
					"type": "array",
					"description": "GroupItemInfo can either be a WorkspaceInfo or GroupInfo",
					"items": {
						"$ref": "#/definitions/GroupItemInfo"
					}
				},
				"ownOrganizationC2Layers": {
					"$ref": "#/definitions/GroupInfo"
				},
				"missions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/GroupInfo"
					}
				},
				"externalOrganizationLayers": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/GroupInfo"
					}
				},
				"plansAndOrders": {
					"$ref": "#/definitions/GroupInfo"
				},
				"failed": {
					"type": "boolean"
				},
				"versionTag": {
					"type": "string"
				}
			}
		},
		"AclPermissionInfo": {
			"type": "object",
			"properties": {
				"username": {
					"type": "string"
				},
				"permissionManageAcl": {
					"type": "boolean"
				},
				"permissionRead": {
					"type": "boolean"
				},
				"permissionWrite": {
					"type": "boolean"
				},
				"objectId": {
					"type": "string"
				}
			}
		},
		"CreateFilterLayerInfo": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"rolesWithReadAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"rolesWithOwnerAccess": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"restrictedByUser": {
					"type": "string",
					"description": "Internal use only - will be deleted in later version"
				},
				"hasOwnerAccess": {
					"type": "boolean",
					"description": "Whether current user has owner access to layer"
				},
				"hasReadAccess": {
					"type": "boolean",
					"description": "Whether current user has read access to layer"
				},
				"hasWriteAccess": {
					"type": "boolean",
					"description": "Whether current user has write access to layer"
				},
				"filterDescription": {
					"description": "Filter description of layer",
					"$ref": "#/definitions/FilterNodeDto"
				},
				"sourceLayers": {
					"type": "array",
					"description": "The source layers of filter layer",
					"uniqueItems": true,
					"items": {
						"$ref": "#/definitions/FilterLayerSourceLayerInfo"
					}
				},
				"alarm": {
					"description": "The layer alarm",
					"$ref": "#/definitions/FilterLayerAlarmInfo"
				},
				"trackDecorationDescriptionInfo": {
					"description": "The decoration description for layer",
					"$ref": "#/definitions/TrackDecorationDescriptionInfo"
				}
			}
		},
		"AcmControlPointDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"acmId": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/GeometryModelDto"
						},
						"flightLevel": {
							"type": "string"
						},
						"style": {
							"type": "string"
						},
						"symbolCode": {
							"type": "string"
						}
					}
				}
			]
		},
		"AcmObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"acmType": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/GeometryModelDto"
						},
						"use": {
							"type": "string"
						},
						"geoDatum": {
							"type": "string"
						},
						"flightLevel": {
							"type": "string"
						},
						"airspaceTimeMode": {
							"type": "string"
						},
						"acmStartTime": {
							"type": "integer",
							"format": "int64"
						},
						"acmStopTime": {
							"type": "integer",
							"format": "int64"
						},
						"controlAuth": {
							"type": "string"
						},
						"radioFrequency": {
							"type": "string"
						},
						"transitInstructions": {
							"type": "string"
						},
						"shape": {
							"type": "string"
						},
						"freeText": {
							"type": "string"
						},
						"style": {
							"type": "string"
						},
						"symbolCode": {
							"type": "string"
						}
					}
				}
			]
		},
		"AddressDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32"
				},
				"text": {
					"type": "string"
				}
			}
		},
		"AisAttributesDto": {
			"type": "object",
			"properties": {
				"mmsi": {
					"type": "string"
				},
				"imo": {
					"type": "string"
				},
				"navigationalStatus": {
					"type": "integer",
					"format": "int32"
				},
				"shipAndCargoType": {
					"type": "integer",
					"format": "int32"
				},
				"maximumPresentStaticDraught": {
					"type": "string"
				}
			}
		},
		"AisObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"kinematics": {
							"$ref": "#/definitions/KinematicsDto"
						},
						"voyageData": {
							"$ref": "#/definitions/VoyageDataDto"
						},
						"shipData": {
							"$ref": "#/definitions/ShipDataDto"
						},
						"calculatedData": {
							"$ref": "#/definitions/CalculatedDataDto"
						}
					}
				}
			]
		},
		"AliasDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"BeaconGeometryObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"style": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/GeometryModelDto"
						},
						"remarks": {
							"type": "string"
						}
					}
				}
			]
		},
		"BeaconObjectDto": {
			"type": "object",
			"properties": {
				"customAttributes": {
					"type": "object",
					"description": "Key/value pairs of strings holding custom attributes, see 'Custom Attributes' section in Programmer's Guide"
				},
				"reportTime": {
					"type": "integer",
					"format": "int64",
					"description": "Reported time of the symbol in milliseconds since midnight, January 1, 1970 UTC"
				},
				"lastHeartbeat": {
					"type": "integer",
					"format": "int64",
					"description": "'Last Heartbeat time' of the symbol in milliseconds since midnight, January 1, 1970 UTC. Last Heartbeat time is only send if different from 'reportTime'. Last Heartbeat time is last time an external source send the track information"
				},
				"correlationExpression": {
					"description": "Associated correlation expression",
					"$ref": "#/definitions/CorrelationExpressionDto"
				}
			}
		},
		"BeaconObjectReferenceDto": {
			"type": "object",
			"properties": {
				"referenceId": {
					"type": "integer",
					"format": "int32"
				},
				"workspaceId": {
					"type": "string"
				},
				"objectId": {
					"type": "string"
				},
				"reportTime": {
					"type": "integer",
					"format": "int64"
				},
				"displayName": {
					"type": "string"
				},
				"symbolCode": {
					"type": "string"
				},
				"subSymbolCode": {
					"type": "string"
				},
				"atcSymbolCode": {
					"type": "string"
				},
				"layerName": {
					"type": "string"
				},
				"repOrg": {
					"type": "string"
				},
				"hidden": {
					"type": "boolean"
				},
				"lost": {
					"type": "boolean"
				},
				"aboveThreshold": {
					"type": "boolean"
				},
				"distance": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"C2AttributesDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"reportingOrganisationName": {
					"type": "string"
				},
				"classification": {
					"type": "integer",
					"format": "int32"
				},
				"effectiveFrom": {
					"type": "integer",
					"format": "int64"
				},
				"effectiveTo": {
					"type": "integer",
					"format": "int64"
				},
				"comment": {
					"type": "string"
				},
				"staffComment": {
					"type": "string"
				},
				"alternateName": {
					"type": "string"
				},
				"operationalStatus": {
					"type": "integer",
					"format": "int32"
				},
				"operationalStatusQualifier": {
					"type": "integer",
					"format": "int32"
				},
				"orbatPath": {
					"type": "string"
				},
				"accuracy": {
					"type": "integer",
					"format": "int32"
				},
				"reliability": {
					"type": "integer",
					"format": "int32",
					"description": "Allowed values: 0 (Unknown), 1 (Completely reliable), 2 (Usually reliable), 3 (Fairly reliable), 4 (Not usually reliable), 5 (Unreliable), 6 (Reliability cannot be judged)"
				},
				"affiliation": {
					"type": "integer",
					"format": "int32"
				},
				"speed": {
					"type": "number",
					"format": "double"
				},
				"direction": {
					"type": "number",
					"format": "double"
				},
				"leftOrganisationName": {
					"type": "string"
				},
				"rightOrganisationName": {
					"type": "string"
				},
				"maxAltitude": {
					"type": "number",
					"format": "double"
				},
				"minAltitude": {
					"type": "number",
					"format": "double"
				},
				"priority": {
					"type": "integer",
					"format": "int32"
				},
				"altitudeType": {
					"type": "integer",
					"format": "int32"
				},
				"aliases": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AliasDto"
					}
				},
				"addresses": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AddressDto"
					}
				},
				"subTypeCode": {
					"type": "string"
				},
				"reinforcement": {
					"type": "integer",
					"format": "int32"
				},
				"serviceCode": {
					"type": "integer",
					"format": "int32"
				},
				"hullNumber": {
					"type": "string"
				},
				"fillPattern": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"C2AttributesExtDto": {
			"type": "object",
			"properties": {
				"occupation": {
					"type": "string"
				},
				"heightType": {
					"type": "integer",
					"format": "int32"
				},
				"mineContent": {
					"type": "integer",
					"format": "int32"
				},
				"minePattern": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"C2AttributesIedDto": {
			"type": "object",
			"properties": {
				"emplacement": {
					"type": "integer",
					"format": "int32"
				},
				"employmentMethod": {
					"type": "integer",
					"format": "int32"
				},
				"suicide": {
					"type": "integer",
					"format": "int32"
				},
				"useSequence": {
					"type": "integer",
					"format": "int32"
				},
				"vehiclePlacement": {
					"type": "integer",
					"format": "int32"
				},
				"intendedOutcome": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"C2InstallationAttributesDto": {
			"type": "object",
			"properties": {
				"usageStatus": {
					"type": "integer",
					"format": "int32"
				},
				"securityStatus": {
					"type": "integer",
					"format": "int32"
				},
				"reserveIndicator": {
					"type": "integer",
					"format": "int32"
				},
				"enemyActivity": {
					"type": "integer",
					"format": "int32"
				},
				"minePresence": {
					"type": "integer",
					"format": "int32"
				},
				"occupationProgramIndicator": {
					"type": "integer",
					"format": "int32"
				},
				"icaoCode": {
					"type": "string"
				},
				"airfieldUseCategory": {
					"type": "integer",
					"format": "int32"
				},
				"numberOfBeds": {
					"type": "integer",
					"format": "int32"
				},
				"occupiedBeds": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"C2ObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"symbolCode": {
							"type": "string"
						},
						"style": {
							"type": "string"
						},
						"c2Attributes": {
							"$ref": "#/definitions/C2AttributesDto"
						},
						"c2AttributesExt": {
							"$ref": "#/definitions/C2AttributesExtDto"
						},
						"c2AttributesIed": {
							"$ref": "#/definitions/C2AttributesIedDto"
						},
						"installationAttributes": {
							"$ref": "#/definitions/C2InstallationAttributesDto"
						},
						"geometry": {
							"$ref": "#/definitions/GeometryModelDto"
						},
						"dafssAttributes": {
							"$ref": "#/definitions/DAFSSAttributesDto"
						},
						"issuingAuthority": {
							"type": "string"
						}
					}
				}
			]
		},
		"CalculatedDataDto": {
			"type": "object",
			"properties": {
				"flag": {
					"type": "integer",
					"format": "int32"
				},
				"mmsi": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"CorrelationExpressionDto": {
			"type": "object",
			"properties": {
				"editable": {
					"type": "boolean"
				},
				"type": {
					"type": "integer",
					"format": "int32",
					"description": "The expression type"
				},
				"sourceReferences": {
					"type": "array",
					"description": "Source references for symbol",
					"items": {
						"$ref": "#/definitions/BeaconObjectReferenceDto"
					}
				},
				"propertyEvaluators": {
					"type": "array",
					"description": "The property evaluators for symbol",
					"items": {
						"$ref": "#/definitions/PropertyEvaluatorDto"
					}
				}
			}
		},
		"DAFSSAttributesDto": {
			"type": "object",
			"properties": {
				"ammunitionRestricted": {
					"type": "integer",
					"format": "int32"
				},
				"secondAmmunitionRestricted": {
					"type": "integer",
					"format": "int32"
				},
				"geometryType": {
					"type": "integer",
					"format": "int32"
				},
				"numberWeapons": {
					"type": "integer",
					"format": "int32"
				},
				"weaponType": {
					"type": "integer",
					"format": "int32"
				},
				"weaponModelNumber": {
					"type": "string"
				},
				"responseTime": {
					"type": "integer",
					"format": "int32"
				},
				"azimuthFire": {
					"type": "number",
					"format": "double"
				},
				"leftTraverseLimit": {
					"type": "number",
					"format": "double"
				},
				"rightTraverseLimit": {
					"type": "number",
					"format": "double"
				},
				"maximumRateFire": {
					"type": "number",
					"format": "double"
				},
				"sustainedRateFire": {
					"type": "number",
					"format": "double"
				},
				"unitTacticalTask": {
					"type": "integer",
					"format": "int32"
				},
				"zoneOfFire": {
					"type": "string"
				},
				"maneuverUnitSupported": {
					"type": "string"
				},
				"artyUnitReinforced": {
					"type": "string"
				}
			}
		},
		"EvaluatorDto": {
			"type": "object",
			"properties": {
				"identifier": {
					"type": "string",
					"description": "The evaluator identifier",
					"enum": ["fixed", "newest", "aggregate", "mean", "single", "min", "max"]
				}
			}
		},
		"FFIAttributesDto": {
			"type": "object",
			"properties": {
				"otherIdType": {
					"type": "integer",
					"format": "int32"
				},
				"otherId": {
					"type": "string"
				},
				"natureOfEmergency": {
					"type": "string"
				},
				"geographicalEntity": {
					"type": "integer",
					"format": "int32"
				},
				"personnelStrength": {
					"type": "integer",
					"format": "int32"
				},
				"credibility": {
					"type": "integer",
					"format": "int32"
				},
				"reliability": {
					"type": "integer",
					"format": "int32"
				},
				"operationalStatus": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"FFITrackPlannedLocationDto": {
			"type": "object",
			"properties": {
				"latitude": {
					"type": "number",
					"format": "float"
				},
				"longitude": {
					"type": "number",
					"format": "float"
				},
				"estimatedTimeOfDeparture": {
					"type": "integer",
					"format": "int64"
				},
				"estimatedTimeOfArrival": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"FriendlyForceTrackDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"vehicleId": {
							"type": "string"
						},
						"symbolCode": {
							"type": "string"
						},
						"subSymbolCode": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/PointDto"
						},
						"tacticalStatus": {
							"type": "integer",
							"format": "int32"
						},
						"callSigns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"mountedCallSigns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"repOrg": {
							"type": "string"
						}
					}
				}
			]
		},
		"GeometryModelDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				}
			}
		},
		"KinematicsDto": {
			"type": "object",
			"properties": {
				"geometry": {
					"$ref": "#/definitions/PointDto"
				},
				"cog": {
					"type": "number",
					"format": "double"
				},
				"sog": {
					"type": "number",
					"format": "double"
				},
				"trueHeading": {
					"type": "number",
					"format": "double"
				},
				"rot": {
					"type": "number",
					"format": "float"
				},
				"navigationalStatus": {
					"type": "string",
					"format": "byte"
				}
			}
		},
		"Link16AirObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/Link16ObjectDto"
				}, {
					"type": "object",
					"properties": {
						"altitude": {
							"type": "number",
							"format": "double"
						},
						"callSign": {
							"type": "string"
						}
					}
				}
			]
		},
		"Link16LandObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/Link16ObjectDto"
				}, {
					"type": "object",
					"properties": {
						"elevation": {
							"type": "number",
							"format": "double"
						}
					}
				}
			]
		},
		"Link16ObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"geometry": {
							"$ref": "#/definitions/PointDto"
						},
						"course": {
							"type": "number",
							"format": "double"
						},
						"speed": {
							"type": "number",
							"format": "double"
						},
						"identity": {
							"type": "string",
							"format": "byte"
						},
						"strength": {
							"type": "string",
							"format": "byte"
						},
						"type": {
							"type": "integer",
							"format": "int32"
						},
						"activity": {
							"type": "string",
							"format": "byte"
						},
						"platform": {
							"type": "string",
							"format": "byte"
						},
						"emergency": {
							"type": "boolean"
						},
						"forceTell": {
							"type": "boolean"
						},
						"exercise": {
							"type": "boolean"
						},
						"simulation": {
							"type": "boolean"
						},
						"specialInterest": {
							"type": "boolean"
						},
						"modeI": {
							"type": "string"
						},
						"modeII": {
							"type": "string"
						},
						"modeIII": {
							"type": "string"
						},
						"modeIV": {
							"type": "string",
							"format": "byte"
						},
						"trackQuality": {
							"type": "string",
							"format": "byte"
						},
						"mil2525SymbolCode": {
							"type": "string"
						},
						"atcSymbolCode": {
							"type": "string"
						},
						"trackName": {
							"type": "string"
						},
						"sourceTrackNumber": {
							"type": "string"
						}
					}
				}
			]
		},
		"NffiObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"positionalDataSecPolicyName": {
							"type": "string"
						},
						"positionalDataSecClassification": {
							"type": "string"
						},
						"positionalDataSecCategory": {
							"type": "string"
						},
						"positionalDataTrackSourceSourceSystemCountry": {
							"type": "string"
						},
						"positionalDataTrackSourceSourceSystemSystem": {
							"type": "string"
						},
						"positionalDataTrackSourceSourceSystemSubSystem": {
							"type": "string"
						},
						"positionalDataCoordinatesLatitudeAccuracy": {
							"type": "string"
						},
						"positionalDataCoordinatesLongitudeAccuracy": {
							"type": "string"
						},
						"positionalDataCoordinatesAltitude": {
							"type": "number",
							"format": "double"
						},
						"positionalDataCoordinatesAltitudeAccuracy": {
							"type": "string"
						},
						"positionalDataBearing": {
							"type": "number",
							"format": "double"
						},
						"positionalDataBearingAccuracy": {
							"type": "string"
						},
						"positionalDataSpeed": {
							"type": "number",
							"format": "double"
						},
						"positionalDataSpeedAccuracy": {
							"type": "string"
						},
						"positionalDataReliability": {
							"type": "string"
						},
						"positionalDataCredibility": {
							"type": "string"
						},
						"positionalDataInclination": {
							"type": "number",
							"format": "double"
						},
						"positionalDataInclinationAccuracy": {
							"type": "string"
						},
						"detailDataSecPolicyName": {
							"type": "string"
						},
						"detailDataSecClassification": {
							"type": "string"
						},
						"detailDataSecCategory": {
							"type": "string"
						},
						"detailDataDetails": {
							"type": "string"
						},
						"deviceSpecificDataSecPolicyName": {
							"type": "string"
						},
						"deviceSpecificDataSecClassification": {
							"type": "string"
						},
						"deviceSpecificDataSecCategory": {
							"type": "string"
						},
						"deviceSpecificDataAdditionalId": {
							"type": "string"
						},
						"deviceSpecificDataPhoneNumber": {
							"type": "string"
						},
						"deviceSpecificDataSerialNumber": {
							"type": "string"
						},
						"deviceSpecificDataTerminalType": {
							"type": "string"
						},
						"deviceSpecificDataTerminalId": {
							"type": "string"
						},
						"deviceSpecificDataSpecialUserDefined": {
							"type": "string"
						},
						"deviceSpecificDataAlert": {
							"type": "string"
						},
						"deviceSpecificDataRemarks": {
							"type": "string"
						},
						"identificationDataSecPolicyName": {
							"type": "string"
						},
						"identificationDataSecClassification": {
							"type": "string"
						},
						"identificationDataSecCategory": {
							"type": "string"
						},
						"identificationDataUnitSymbol": {
							"type": "string"
						},
						"identificationDataUnitShortName": {
							"type": "string"
						},
						"operStatusDataSecPolicyName": {
							"type": "string"
						},
						"operStatusDataSecClassification": {
							"type": "string"
						},
						"operStatusDataSecCategory": {
							"type": "string"
						},
						"operStatusDataFootPrint": {
							"type": "string"
						},
						"operStatusDataStrength": {
							"type": "string"
						},
						"operStatusDataStatusCode": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/GeometryModelDto"
						},
						"ffiAttributes": {
							"$ref": "#/definitions/FFIAttributesDto"
						},
						"trackPlannedLocations": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FFITrackPlannedLocationDto"
							}
						}
					}
				}
			]
		},
		"NvgObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"label": {
							"type": "string"
						},
						"metadata": {
							"type": "object",
							"additionalProperties": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						},
						"symbolCode": {
							"type": "string"
						},
						"modifier": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"style": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/GeometryModelDto"
						},
						"course": {
							"type": "number",
							"format": "double"
						},
						"speed": {
							"type": "number",
							"format": "double"
						},
						"fillPattern": {
							"type": "integer",
							"format": "int32"
						},
						"legType": {
							"type": "integer",
							"format": "int32"
						},
						"country": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			]
		},
		"NvgTextObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/NvgObjectDto"
				}, {
					"type": "object",
					"properties": {
						"content": {
							"type": "string"
						}
					}
				}
			]
		},
		"OthGoldCtcObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/OthGoldObjectDto"
				}, {
					"type": "object",
					"properties": {
						"ctcClass": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"category": {
							"type": "integer",
							"format": "int32"
						},
						"pennantNumber": {
							"type": "string"
						},
						"sconum": {
							"type": "string"
						},
						"selectiveIdentifier": {
							"type": "integer",
							"format": "int32"
						},
						"systemTrackNumber": {
							"type": "string"
						},
						"discreteIdentifier": {
							"type": "integer",
							"format": "int32"
						},
						"internationalRadioCallSign": {
							"type": "string"
						},
						"trademark": {
							"type": "string"
						},
						"registeredOwner": {
							"type": "string"
						},
						"depth": {
							"type": "number",
							"format": "double"
						},
						"altitude": {
							"type": "number",
							"format": "double"
						}
					}
				}
			]
		},
		"OthGoldJUnitObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/OthGoldObjectDto"
				}, {
					"type": "object",
					"properties": {
						"organizationType": {
							"type": "string"
						},
						"echelon": {
							"type": "string"
						},
						"service": {
							"type": "integer",
							"format": "int32"
						},
						"platform": {
							"type": "string"
						},
						"embark": {
							"type": "string"
						}
					}
				}
			]
		},
		"OthGoldObjectDto": {
			"allOf": [{
					"$ref": "#/definitions/BeaconObjectDto"
				}, {
					"type": "object",
					"properties": {
						"trackNumber": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"flag": {
							"type": "string"
						},
						"alertCode": {
							"type": "integer",
							"format": "int32"
						},
						"forceCode": {
							"type": "integer",
							"format": "int32"
						},
						"trackType": {
							"type": "integer",
							"format": "int32"
						},
						"speed": {
							"type": "number",
							"format": "double"
						},
						"uniqueIdentifier": {
							"type": "string"
						},
						"suspicionCode": {
							"type": "integer",
							"format": "int32"
						},
						"emitterVoiceCallSign": {
							"type": "string"
						},
						"geometry": {
							"$ref": "#/definitions/PointDto"
						},
						"remarks": {
							"type": "string"
						},
						"sourceCode": {
							"type": "string"
						},
						"sensorCode": {
							"type": "string"
						},
						"course": {
							"type": "number",
							"format": "double"
						},
						"aisAttributesDto": {
							"$ref": "#/definitions/AisAttributesDto"
						}
					}
				}
			]
		},
		"PointDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"coordinates": {
					"type": "array",
					"items": {
						"type": "number",
						"format": "double"
					}
				}
			}
		},
		"PropertyEvaluatorDto": {
			"type": "object",
			"properties": {
				"property": {
					"type": "integer",
					"format": "int32",
					"description": "The property to evaluate"
				},
				"evaluator": {
					"description": "The evaluator",
					"$ref": "#/definitions/EvaluatorDto"
				},
				"sourceReferenceIds": {
					"type": "array",
					"description": "Source reference IDs for symbol",
					"items": {
						"type": "integer",
						"format": "int32"
					}
				}
			}
		},
		"ShipDataDto": {
			"type": "object",
			"properties": {
				"imo": {
					"type": "integer",
					"format": "int32"
				},
				"callsign": {
					"type": "string"
				},
				"shipname": {
					"type": "string"
				},
				"dimensionA": {
					"type": "integer",
					"format": "int32"
				},
				"dimensionB": {
					"type": "integer",
					"format": "int32"
				},
				"dimensionC": {
					"type": "integer",
					"format": "int32"
				},
				"dimensionD": {
					"type": "integer",
					"format": "int32"
				},
				"shipAndCargoType": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"SymbolDto": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"format": "byte",
					"description": "The symbol type"
				},
				"id": {
					"type": "string",
					"description": "The symbol ID. The format is \"symbol-type:unique-id\" where symbol-type is the number described above. A C2 symbol id could be 9:52b08acb-8bb1-4aa8. For AIS the format is \"8:MMSI-number\" where 8 is the symbol type number for AIS tracks"
				},
				"layerId": {
					"type": "string"
				},
				"properties": {
					"description": "Properties of the associated symbol object. BeaconObjectDto is the common class that the other object types inherits from.",
					"$ref": "#/definitions/BeaconObjectDto"
				}
			}
		},
		"VoyageDataDto": {
			"type": "object",
			"properties": {
				"maximumPresentStaticDraught": {
					"type": "integer",
					"format": "int32"
				},
				"eta": {
					"type": "integer",
					"format": "int64"
				},
				"destination": {
					"type": "string"
				}
			}
		},
		"ConfiguredEnumsDto": {
			"type": "object",
			"properties": {
				"sourceCode": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"sensorCode": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"junitPlatform": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"ctcType": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"echelon": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"organization": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"platformAndOrganization": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				},
				"ctcToMil2525": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/EnumDto"
					}
				}
			}
		},
		"EnumDto": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"desc": {
					"type": "string"
				},
				"mil2525": {
					"type": "string"
				},
				"battleDimension": {
					"type": "string"
				},
				"codingScheme": {
					"type": "string"
				}
			}
		}
	}
}